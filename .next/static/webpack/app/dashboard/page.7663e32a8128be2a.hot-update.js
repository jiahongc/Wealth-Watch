"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: function() { return /* binding */ apiService; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8000\";\n// Mock stock data for when backend is not available\nconst mockStockData = {\n    \"AAPL\": {\n        symbol: \"AAPL\",\n        name: \"Apple Inc.\",\n        price: 175.23,\n        change: 2.45,\n        change_percent: 1.42,\n        last_updated: new Date().toISOString()\n    },\n    \"GOOGL\": {\n        symbol: \"GOOGL\",\n        name: \"Alphabet Inc.\",\n        price: 142.56,\n        change: 0.89,\n        change_percent: 0.63,\n        last_updated: new Date().toISOString()\n    },\n    \"TSLA\": {\n        symbol: \"TSLA\",\n        name: \"Tesla, Inc.\",\n        price: 248.42,\n        change: 5.67,\n        change_percent: 2.34,\n        last_updated: new Date().toISOString()\n    },\n    \"MSFT\": {\n        symbol: \"MSFT\",\n        name: \"Microsoft Corporation\",\n        price: 378.85,\n        change: -1.23,\n        change_percent: -0.32,\n        last_updated: new Date().toISOString()\n    },\n    \"AMZN\": {\n        symbol: \"AMZN\",\n        name: \"Amazon.com, Inc.\",\n        price: 156.78,\n        change: 3.21,\n        change_percent: 2.09,\n        last_updated: new Date().toISOString()\n    },\n    \"NVDA\": {\n        symbol: \"NVDA\",\n        name: \"NVIDIA Corporation\",\n        price: 485.09,\n        change: 12.45,\n        change_percent: 2.64,\n        last_updated: new Date().toISOString()\n    },\n    \"META\": {\n        symbol: \"META\",\n        name: \"Meta Platforms, Inc.\",\n        price: 334.92,\n        change: -2.18,\n        change_percent: -0.65,\n        last_updated: new Date().toISOString()\n    },\n    \"NFLX\": {\n        symbol: \"NFLX\",\n        name: \"Netflix, Inc.\",\n        price: 567.34,\n        change: 8.76,\n        change_percent: 1.57,\n        last_updated: new Date().toISOString()\n    }\n};\nclass ApiService {\n    async checkBackendHealth() {\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/health\"), {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            return response.ok;\n        } catch (e) {\n            return false;\n        }\n    }\n    async request(endpoint, options) {\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...options === null || options === void 0 ? void 0 : options.headers\n                },\n                ...options\n            });\n            if (!response.ok) {\n                throw new Error(\"API request failed: \".concat(response.status, \" \").concat(response.statusText));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"API request error:\", error);\n            throw error;\n        }\n    }\n    async getStockQuote(symbol) {\n        // Check if backend is available\n        if (!this.useMockData) {\n            const isBackendHealthy = await this.checkBackendHealth();\n            if (!isBackendHealthy) {\n                this.useMockData = true;\n                console.log(\"Backend not available, using mock data\");\n            }\n        }\n        if (this.useMockData) {\n            const mockData = mockStockData[symbol.toUpperCase()];\n            if (mockData) {\n                // Add some randomness to simulate real-time data\n                const randomChange = (Math.random() - 0.5) * 2;\n                const randomPrice = mockData.price + randomChange;\n                return {\n                    ...mockData,\n                    price: Math.round(randomPrice * 100) / 100,\n                    change: Math.round(randomChange * 100) / 100,\n                    change_percent: Math.round(randomChange / mockData.price * 10000) / 100,\n                    last_updated: new Date().toISOString()\n                };\n            }\n            throw new Error(\"Stock symbol \".concat(symbol, \" not found\"));\n        }\n        return this.request(\"/api/stocks/quote/\".concat(symbol.toUpperCase()));\n    }\n    async getMultipleQuotes(symbols) {\n        // Check if backend is available\n        if (!this.useMockData) {\n            const isBackendHealthy = await this.checkBackendHealth();\n            if (!isBackendHealthy) {\n                this.useMockData = true;\n                console.log(\"Backend not available, using mock data\");\n            }\n        }\n        if (this.useMockData) {\n            const results = [];\n            for (const symbol of symbols){\n                try {\n                    const quote = await this.getStockQuote(symbol);\n                    results.push(quote);\n                } catch (e) {\n                    continue;\n                }\n            }\n            return results;\n        }\n        return this.request(\"/api/stocks/quotes\", {\n            method: \"POST\",\n            body: JSON.stringify(symbols)\n        });\n    }\n    constructor(){\n        this.useMockData = false;\n        this.baseUrl = API_BASE_URL;\n    }\n}\nconst apiService = new ApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});